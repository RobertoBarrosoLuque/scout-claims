from datetime import datetime
from typing import Dict, Any


def generate_claim_report(
    damage_analysis: Dict[str, Any], incident_data: Dict[str, Any]
) -> str:
    """
    Generate a comprehensive insurance claim report from analyzed data.

    Args:
        damage_analysis: Results from image damage analysis
        incident_data: Processed incident data from transcript

    Returns:
        Formatted markdown claim report
    """

    # Generate claim reference number
    timestamp = datetime.now()
    claim_ref = f"CLM-{timestamp.strftime('%Y%m%d')}-{timestamp.strftime('%H%M%S')}"

    # Extract key information safely
    damage_description = damage_analysis.get("description", "Vehicle damage detected")
    damage_severity = damage_analysis.get("severity", "moderate")
    damage_location = damage_analysis.get("location", "unknown")

    # Get incident details safely
    date_location = incident_data.get("date_location", {})
    parties_involved = incident_data.get("parties_involved", {})
    fault_assessment = incident_data.get("fault_assessment", {})
    incident_description = incident_data.get("incident_description", {})
    injuries_medical = incident_data.get("injuries_medical", {})

    # Generate simple assessments
    priority = _get_priority_level(
        damage_severity, injuries_medical.get("anyone_injured", "no")
    )
    cost_estimate = _estimate_cost_range(damage_severity)
    recommendation = _get_recommendation(
        damage_severity, injuries_medical.get("anyone_injured", "no")
    )

    report = f"""
        # 🚗 INSURANCE CLAIM REPORT

        **Claim Reference:** {claim_ref}
        **Date Generated:** {timestamp.strftime('%B %d, %Y at %I:%M %p')}
        **Status:** Under Review
        **Priority:** {priority}

        ---

        ## 📋 EXECUTIVE SUMMARY

        Vehicle sustained **{damage_severity}** damage to the **{damage_location.replace('-', ' ')}** area. Initial assessment indicates this is a legitimate claim requiring {"immediate attention" if priority.startswith("HIGH") else "standard processing"}.

        **Recommendation:** {recommendation}
        **Estimated Repair Cost:** {cost_estimate}

        ---

        ## 🚨 ACCIDENT DETAILS

        ### Date, Time & Location
        - **Date:** {date_location.get('date', 'Not specified')}
        - **Time:** {date_location.get('time', 'Not specified')}
        - **Location:** {date_location.get('location', 'Not specified')}

        ### How It Happened
        {incident_description.get('what_happened', 'No description provided')}

        ---

        ## 👥 PARTIES INVOLVED

        ### Other Driver
        - **Name:** {parties_involved.get('other_driver_name', 'Not specified')}
        - **Vehicle:** {parties_involved.get('other_driver_vehicle', 'Not specified')}

        ### Witnesses
        {parties_involved.get('witnesses', 'None reported')}

        ---

        ## 🔧 VEHICLE DAMAGE

        ### Damage Assessment
        - **Severity:** {damage_severity.title()}
        - **Location:** {damage_location.replace('-', ' ').title()}
        - **Description:** {damage_description}
        - **Estimated Cost:** {cost_estimate}

        ### Evidence
        ✅ **Damage Photos:** Received and analyzed
        ✅ **Incident Recording:** Transcribed and processed

        ---

        ## 🏥 INJURIES & MEDICAL

        ### Injury Status
        - **Anyone Injured:** {injuries_medical.get('anyone_injured', 'Unknown').title()}
        - **Details:** {injuries_medical.get('injury_details', 'None reported')}
        - **Medical Attention:** {injuries_medical.get('medical_attention', 'Not specified')}
        - **Severity:** {injuries_medical.get('injury_severity', 'None').title()}

        ---

        ## ⚖️ FAULT DETERMINATION

        **Who's At Fault:** {fault_assessment.get('who_at_fault', 'Under investigation').title()}
        **Reason:** {fault_assessment.get('reason', 'Investigation required')}

        ---

        ## 💰 ESTIMATED COSTS

        ### Repair Costs
        - **Vehicle Repair:** {cost_estimate}
        - **Medical Expenses:** {_format_medical_costs(injuries_medical)}
        - **Total Estimated:** {_calculate_total_estimate(cost_estimate, injuries_medical)}

        ---

        ## ✅ NEXT STEPS

        {_generate_next_steps(damage_severity, injuries_medical, fault_assessment)}

        ---

        ## 📝 ADJUSTER NOTES

        - Claim processed using AI-assisted analysis
        - Photos and incident description analyzed automatically
        - {"High priority due to injuries - expedite processing" if injuries_medical.get('anyone_injured', 'no').lower() == 'yes' else "Standard processing timeline applies"}
        - Human adjuster review required for final approval

        ---

        **Generated by:** Scout AI Claims Assistant
        **Processing Time:** {timestamp.strftime('%I:%M %p')}
        **Review Required:** Yes

        ---

        *This preliminary assessment is based on automated analysis of submitted photos and incident description. Final determination pending adjuster review.*"""

    return report


def _get_priority_level(damage_severity: str, injuries_reported: str) -> str:
    """Determine claim priority"""
    if injuries_reported.lower() == "yes":
        return "🔴 HIGH - Injuries Reported"
    elif damage_severity.lower() == "major":
        return "🟡 HIGH - Major Damage"
    elif damage_severity.lower() == "moderate":
        return "🟡 MEDIUM - Moderate Damage"
    else:
        return "🟢 STANDARD - Minor Damage"


def _estimate_cost_range(damage_severity: str) -> str:
    """Estimate repair costs based on damage severity"""
    severity_costs = {
        "minor": "$500 - $1,500",
        "moderate": "$1,500 - $5,000",
        "major": "$5,000 - $15,000",
        "severe": "$15,000+",
    }
    return severity_costs.get(damage_severity.lower(), "$1,000 - $3,000")


def _get_recommendation(damage_severity: str, injuries_reported: str) -> str:
    """Generate simple recommendation"""
    if injuries_reported.lower() == "yes":
        return "🔴 URGENT: Expedite processing due to injuries"
    elif damage_severity.lower() in ["major", "severe"]:
        return "🟡 PRIORITY: Schedule inspection within 48 hours"
    else:
        return "🟢 STANDARD: Process within normal timeline"


def _format_medical_costs(injuries_medical: Dict[str, Any]) -> str:
    """Format medical cost estimate"""
    if injuries_medical.get("anyone_injured", "no").lower() == "yes":
        severity = injuries_medical.get("injury_severity", "minor").lower()
        if severity == "severe":
            return "$10,000 - $50,000"
        elif severity == "moderate":
            return "$2,000 - $10,000"
        else:
            return "$500 - $2,000"
    return "$0 - No injuries reported"


def _calculate_total_estimate(
    repair_cost: str, injuries_medical: Dict[str, Any]
) -> str:
    """Calculate total claim estimate"""
    if injuries_medical.get("anyone_injured", "no").lower() == "yes":
        return f"{repair_cost} + medical costs"
    return repair_cost


def _generate_next_steps(
    damage_severity: str,
    injuries_medical: Dict[str, Any],
    fault_assessment: Dict[str, Any],
) -> str:
    """Generate actionable next steps"""
    steps = [
        "1. **Schedule vehicle inspection** - Verify damage assessment",
        "2. **Contact other party** - Obtain insurance information",
    ]

    # Always needed

    # Conditional steps
    if injuries_medical.get("anyone_injured", "no").lower() == "yes":
        steps.append("3. **Request medical records** - Document injury claims")
        steps.append("4. **Coordinate medical provider** - Ensure proper treatment")

    if fault_assessment.get("who_at_fault", "unclear") == "unclear":
        steps.append("3. **Obtain police report** - Clarify fault determination")

    if damage_severity.lower() in ["major", "severe"]:
        steps.append(
            "4. **Get multiple repair estimates** - Ensure accurate cost assessment"
        )

    steps.append(
        f"{len(steps) + 1}. **Update customer** - Communicate timeline and next steps"
    )

    return "\n".join(steps)
